# -*- coding: UTF-8 -*-
import base64

# 多次base64 encode后的字符串 长度不为4的倍数的话下一步会自动补齐等号=到长度为4的倍数
p = 'SlpDVktNQ09LUklUS1RMMklVWUZFUkMySUpIRklSSlRLRktGRVJTT0tSSVRFVFQySlYzVTRSS1JHRkhFSVZKUkpWNUUyTUNTS1JJVEFUU0ZLRjVFMlZDU0k1SEVJVUpSSlZLRTJNS09JVktUQ1RTVUtFWVUyNlNCR0JKRUlaQ0NKWktGSzZTT0lSSkVNVFNVS0VZRkVSQ05QQkhFS1ZKUkpaQ0ZLNktPSVJJVEFVU0VNUkJFNFJETFBKR1VJVkxZSlpLRkNNS05OSklYU1RTRktVWUU0UkNWR0ZHWFVRSlFLSktGVVFTT0tSQ1hVVFNVS0pDVTRNQ0ZHQkhWSVRMWUpaQ1ZDTTJSS1JLWFNUU0VKVVlGRVZDUkdGSEVJVkwySlZDRkVSU09OTkNUQ1RMS0tGNFU0UktWR0ZIRUlWSlZKVjVFQ01LTk5KSVRBVFNGS0VaVkNWQ1NJWkhFSVVKUUtKQ0UyNTJPS1JFVEFUU0VLVjRVNFJDTkdCSkVJWkNDSlpLRks2U05JUktYUVRUTElVWVU0VkNOTzVIRUtWSlFKWktGQ05LTlBKQ1RBVVNFS1VZRTRSS1JHTkhWSVVTR0paS0ZDTVNOUEpHWE9UU0ZLVVpWQ1ZDVlBCSEhVMlpRS0pLRkNNS09LUktYVVRLRUtKREU0MjJGR0ZHV1VVSlJKWkNWS01LT0lSS1RLVEwySUVZVTJWREVJSkhGSVNKUUpaS0ZFUlNPSVJLVEFUU1VKVjNVNFZDRkdGSEVJVkpSSlo1R09NQ1NLUktUQVRTVU5ONUUyUkNTSTVIRklVSlFLSkNHR05LT0lWSVRHVUtVS0UyVTRNQ0ZHQkpFSVdTQ0paS0VTTUNOTkpKRU1UU1VLVVlFNFZDTk81SEZJUkpUS0ZLRks2Q05QSkdUQVVTVUtVWUU0MjJKUEpHVklVU0ZKWlZVS01LT0tSU0VFVFNGS1VZVTRSQ1ZHVkdYVVFKUkpWS0ZVUVNPS1JNVEFUTEtLSkRFNFJDUkdCSkVJVExZSlpDVktNQ09JUktYUVRSUUlVWUZFVkNWR0JIRUtVSlRLRktGRVJLT05OQ1RDVFNVSlVZRTRSS1ZHQkhGSVZKUkpWNUVLTUNTSVJORUVUU1VKRVlFNDJTU0laSEVJVUpSSlpLRTI1Mk9LUkVURVVLVUtVWVUyNlNGR0JKRklVSlJKWkNWQ00yUktSSkVLVFRMSVVZVTIyU1JHQkhFS1ZKUUpaS0ZDTUtOUEpBVENUS1VMSkJFNFZDRlBKR1dVVVNHSlpDRkNNU1JOSlNFRVRTRktFWkZDVkNWR0pIRUlTSlFLSktGS01DT0tSVlhVVEtFS1Y0RTRWQ1JHRkdXVVVKU0paQ1ZLTUNPSVJORUdUTDJJVVlGRVZDUkdCSEZJUkpUS0ZLRkVSU09LUklUQ1RTVUpWNEU0UktSR05JVklWTFlKVjVFMk1DU0tSSVRDVFNFTk41RTJWQ1NJNUhGSVVKUkpaS0UyTUtPSVZLVEFUU0VLVVlVMjZTRkdCSkZJVkpRSlpLRks2U05OSkpFTVRTRUtFWUZFUkNOUEJIRUtWSlJKWkNGSzZLT0lSTVRBVVNVS0VZVTRWQ1ZQSkdVSVVTR0paVlVLTUtOS1JHWFNUU0ZLVVlFNFZDVlBCR1hVUkpRS0pLRktNQ09LUktUR1QyVUtKREU0VkNSR0JIRklUTFhKWktFS01LT0lSS1RFVFNFSkVZRkVWQ1JHRkhFSVZMMkpWS0ZFUlNPS1JJVEFVU0VNTTJVNFJLUkdOSVZJVUpWSllZRUtNQ1NJUlNFRVRTVUlWNUUyVkNTSVpIRUlWSlFKWktHSVFTT0lWS1RDVFNFS1Y0RTI2U1JHQkpGSVVKUUpaS0dXNlNOSVJLWFFUVExJVVlVMjJTUkdGSEVLVkpRSlpLRkNOS05QSkNUQVVUS0tFWUU0VkNKR0JHWFVVU0dKWktGQ01LUEtSR1hPVFNVSVVaRkNWQ1ZHRkdYVVFKUUtKS0ZDTUNPSVZJWFVUS1VLSkNVNFZDUkdCSkVJWVpWSlpDVktNQ09LUktUS1RMMklFWVUyVkMySUpIRklSTDJKVktGRVJLT0dCQ1RDVDJVSlY0RTRSS1ZHQkhFSVVTRkpaNUdXTUNTSVJHWE9UU1VJVVpWQ1ZDVlBGSEVJVUpRS0pLRkNNST0='

p = p[:int(range(0,len(p),4)[-1:][0])]+'{:=<4}'.format(p[int(range(0,len(p),4)[-1:][0]):])


n = '' # 记录每一步decode结果
steps = [] # 记录decode步骤

# 多步base64 decode直到不能decode为止
while 1:

    # Base16
    try:
        print "[?] using base16 deocde"
        n = base64.b16decode(p)
        print "[+] %s" % (n)
        steps.append(16)
        p = n
        continue
    except:
        pass


    # Base32
    try:
        print "[?] using base32 deocde"
        n = base64.b32decode(p)
        print "[+] %s" % (n)
        steps.append(32)
        p = n
        continue
    except:
        pass


    # Base64
    try:
        print "[?] using base64 deocde"
        n = base64.b64decode(p)
        print "[+] %s" % (n)
        steps.append(64)
        p = n
        continue
    except:
        pass


    break

print "[+] flag found : %s" % (n)
print "[+] steps : %s" % (steps)
